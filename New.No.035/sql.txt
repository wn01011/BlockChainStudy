CREATE SCHEMA 'testing' DEFAULT CHARACTER SET utf8mb4;

CREATE TABLE `testing`.`new_table` (
  `idx` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `pw` VARCHAR(256) NULL,
  `id` VARCHAR(45) NULL,
  `create_at` DATE NULL,
  PRIMARY KEY (`idx`));

SELECT * FROM testing.new_table;
INSERT INTO `testing`.`new_table` 
       (`idx`, `name`, `pw`, `id`, `create_at`) 
VALUES ('3', 'c', 'c', 'c', '2022-10-27');


자료형(숫자)
- BOOLEAN : 참 거짓, 1 BYTE
- TINYINT : 1 BYTE의 정수 << -128 ~ 127, 0 ~ 255
- INT : 4 BYTE의 정수 << –2,147,483,648 ~ 2,147,483,647
- BIGINT : 8 BYTE의 정수
- FLOAT : 4 BYTE의 실수
    - 계산할 때 확률적으로 오류가 뜰 수 있다.
- DOUBlE : 8 BYTE의 실수
    - FLOAT는 조금 덜 오류가 뜬다.
- BIT(n) : n BIT의 정수 << 몇 개든지 내가 설정한다. ex) BIT(4) : 0 ~ 15

자료형(문자)
- CHAR(n) : n BYTE의 문자, 단 최대 2^8 BYTE까지만 가능하다.
- VARCHAR(n) : 최대 n BYTE의 가변 문자, 최대 2^8 BYTE까지만 가능
    - ASCII : 1 BYTE(8 BIT)
    - UTF8 : 1 ~ 3 BYTE << (2^8 / 3) ~ 2^8 < 0 ~ 126 < 2^7 - 1 < 7BIT < 앞에 1BIT를 버리고 총 8BIT를 사용한다.
    - UTF8MB4 : 1 ~ 4 BYTE
    - UTF16 : 3 BYTE
- TEXT : 최대 2^16 BYTE의 가변 문자
- LONGTEXT : 최대 2^32 BYTE의 가변 문자

자료형(시간)
- DATE : YYYY-MM-DD << 3 BYTE
- TIME : HH:MM:SS << 8 BYTE
- DATETIME :  YYYY-MM-DD HH:MM:SS << 4 BYTE : 생성될 때 데이터베이스 시간 기준으로 저장
- TIMESTAMP : YYYY-MM-DD HH:MM:SS << 4 BYTE : 확인한 쪽의 시간 timezone을 맞춰 시간값 변경
- YEAR : YYYY

옵션
- NOT NULL : null 값 사용 제한된 조건
- UNIQUE : 테이블 내에서 해당 column의 값이 유일하도록 설정(중복 불가능)
- PRIMARY KEY(기본 키) : 테이블의 각 행을 고유하게 식별하는 값(UNIQUE + NOT NULL)
- FOREIGN KEY(외래 키) : 두 테이블의 데이터 간 연결을 설정하고 강제 적용하여 외래키 테이블에 저장될 수 있는 데이터를 제어
- CHECK : 해당 column에 저장 가능한 데이터 값의 범위나 조건 지정
- DEFAULT : 기본값
- AUTO_INCREMENT : index 값 자동 증가 
- COMMENT : 설명

SELECT * FROM testing.new_table1;
SELECT : 데이터를 가져온다.
* : 전부
FROM : 데이터를 가져오는 곳 지정.

USE testing;
testing DB를 사용한다. << 접속한다

SELECT * FROM testing.new_table1 WHERE name='어쩌구';
SELECT name, id FROM testing.new_table1 WHERE name LIKE '어쩌구';
name에 '어쩌구'가 포함되어있으면 가져와라.

SELECT * FROM testing.new_table1 ORDER BY name DESC;
name을 기준으로 내림차순으로 가져온다.(ASC : 오름차순)

SELECT COUNT FROM testing.new_table1;
개수 가져오기

INSERT INTO `testing`.`new_table` (`idx`, `name`, `password`, `id`, `create_at`) VALUES ('0', 'abcd', 'efgh', '111', '2022-02-10');

INSERT
- 데이터를 저장한다.
- INTO : 어디에?
- (`어쩌구`) : 컬럼명
- VALUES('0') : 어떤 값들이냐

INSERT INTO `testing`.`new_table` SET(`idx` = '0', `name` = 'abcd', `password` = 'efgh', `id` = '1111', `create_at` = '2022-10-22');

- `` << 객체(컬럼명)
- '' << 고유값(스트링이나 숫자 등등 데이터)

UPDATE
-데이터를 수정한다.

UPDATE `testing`.`new_table` SET id = 'kjk' WHERE idx = 2;

DELETE
-데이터를 삭제한다.

DELETE FROM `testing`.`new_table` WHERE idx = 3;